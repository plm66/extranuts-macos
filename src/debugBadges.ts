// Debug des badges de s√©lecteurs
import { notes, assignSelectorToNote } from './stores/noteStore'
import { articleCountsBySelector, getArticleCountForSelector } from './stores/selectorsStore'

// Exposer les fonctions de debug dans la console
(window as any).debugBadges = {
  // Voir toutes les notes avec leur selectorId
  showNotes: () => {
    console.log('üìã TOUTES LES NOTES:')
    notes().forEach(note => {
      console.log(`- ${note.title} (ID: ${note.id}) - SelectorId: ${note.selectorId || 'AUCUN'}`)
    })
  },
  
  // Voir les comptages par s√©lecteur
  showCounts: () => {
    console.log('üìä COMPTAGES PAR S√âLECTEUR:')
    const counts = articleCountsBySelector()
    console.log('Map compl√®te:', counts)
    console.log('S√©lecteurs avec notes:')
    Array.from(counts.entries())
      .filter(([_, count]) => count > 0)
      .forEach(([selectorId, count]) => {
        console.log(`  - S√©lecteur ${selectorId}: ${count} notes`)
      })
  },
  
  // Assigner une note √† un s√©lecteur
  assignNote: async (noteId: string, selectorId: number) => {
    console.log(`üîß Assignation de la note ${noteId} au s√©lecteur ${selectorId}`)
    await assignSelectorToNote(noteId, selectorId)
  },
  
  // Obtenir le premier ID de note disponible
  getFirstNoteId: () => {
    const firstNote = notes()[0]
    if (firstNote) {
      console.log(`üìù Premi√®re note: "${firstNote.title}" (ID: ${firstNote.id})`)
      return firstNote.id
    }
    console.log('‚ùå Aucune note disponible')
    return null
  },
  
  // Test rapide : assigner la premi√®re note au s√©lecteur 1
  testAssign: async () => {
    const noteId = (window as any).debugBadges.getFirstNoteId()
    if (noteId) {
      await (window as any).debugBadges.assignNote(noteId, 1)
      setTimeout(() => {
        console.log('‚è±Ô∏è Apr√®s 1 seconde:')
        ;(window as any).debugBadges.showCounts()
      }, 1000)
    }
  },
  
  // V√©rifier un s√©lecteur sp√©cifique
  checkSelector: (selectorId: number) => {
    const count = getArticleCountForSelector(selectorId)
    console.log(`üé± S√©lecteur ${selectorId} a ${count} notes`)
    
    // Lister les notes de ce s√©lecteur
    const notesForSelector = notes().filter(n => n.selectorId === selectorId)
    if (notesForSelector.length > 0) {
      console.log('Notes assign√©es:')
      notesForSelector.forEach(n => console.log(`  - "${n.title}" (ID: ${n.id})`))
    }
  },
  
  // Test flow complet
  testFlow: async () => {
    console.log('üß™ TEST FLOW COMPLET')
    console.log('===================')
    
    // 1. √âtat initial
    console.log('1Ô∏è‚É£ √âTAT INITIAL:')
    ;(window as any).debugBadges.showNotes()
    ;(window as any).debugBadges.showCounts()
    
    // 2. R√©cup√©rer quelques notes
    const allNotes = notes()
    if (allNotes.length < 2) {
      console.log('‚ùå Pas assez de notes pour le test (minimum 2)')
      return
    }
    
    // 3. Assigner des notes √† diff√©rents s√©lecteurs
    console.log('\n2Ô∏è‚É£ ASSIGNATION DE NOTES:')
    const note1 = allNotes[0]
    const note2 = allNotes[1]
    
    console.log(`- Assignation de "${note1.title}" au s√©lecteur 1`)
    await assignSelectorToNote(note1.id, 1)
    
    console.log(`- Assignation de "${note2.title}" au s√©lecteur 2`)
    await assignSelectorToNote(note2.id, 2)
    
    // 4. V√©rifier imm√©diatement apr√®s assignation
    console.log('\n3Ô∏è‚É£ √âTAT APR√àS ASSIGNATION:')
    ;(window as any).debugBadges.showCounts()
    ;(window as any).debugBadges.checkSelector(1)
    ;(window as any).debugBadges.checkSelector(2)
    
    // 5. R√©assigner une note
    console.log(`\n4Ô∏è‚É£ R√âASSIGNATION de "${note1.title}" au s√©lecteur 2`)
    await assignSelectorToNote(note1.id, 2)
    
    // 6. V√©rifier l'√©tat final
    console.log('\n5Ô∏è‚É£ √âTAT FINAL:')
    ;(window as any).debugBadges.showCounts()
    ;(window as any).debugBadges.checkSelector(1)
    ;(window as any).debugBadges.checkSelector(2)
    console.log('\n‚úÖ TEST FLOW TERMIN√â')
  }
}

console.log(`
üêõ DEBUG BADGES ACTIV√â! 
Utilisez ces commandes dans la console:
- debugBadges.showNotes() : Voir toutes les notes
- debugBadges.showCounts() : Voir les comptages
- debugBadges.assignNote(noteId, selectorId) : Assigner une note
- debugBadges.getFirstNoteId() : Obtenir l'ID de la premi√®re note
- debugBadges.testAssign() : Test rapide d'assignation
- debugBadges.checkSelector(id) : V√©rifier un s√©lecteur sp√©cifique
- debugBadges.testFlow() : Test flow complet avec r√©assignation
`)